{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Vector Memoria Compartida":{
		"prefix": "vectorSHM",
		"body": [
			"$1 *vector_$2 = NULL;",
			"int tam_vector_$2 = $3;",
			"int id_vector_$2 = shmget(IPC_PRIVATE, (tam_vector_$2 * sizeof($1)), IPC_CREAT | S_IRUSR | S_IWUSR);",
			"vector_$2 = ($1 *) shmat(id_vector_$2, 0, 0);",
			"if(vector_$2 == NULL){\n\tprintf(\"No se pudo reservar espacio para vector_$2\\n\");\n\texit(EXIT_FAILURE);\n}",
			"\n",
			"//DESCONECTARSE Y ELIMINAR vector_$2",
			"shmdt(vector_$2);",
			"shmctl(id_vector_$2, IPC_RMID, 0);",
			"vector_$2 = NULL;",
			"$4"
		],
		"description": "Fragmento para crear vector de memoria compartida"
	},

	"Matriz Memoria Compartida":{
		"prefix": "matrizSHM",
		"body": [
			"int $1 = $2;",
			"int $3 = $4;",
			"$5 **matriz_$6 = NULL;",
			"int id_matriz_$6 = shmget(IPC_PRIVATE, ($1 * sizeof($5 *)), IPC_CREAT | S_IRUSR | S_IWUSR);",
			"matriz_$6 = ($5 **) shmat(id_matriz_$6, 0, 0);",
			"if(matriz_$6 == NULL){\n\tprintf(\"No se pudo reservar espacio para matriz_$6\\n\");\n\texit(EXIT_FAILURE);\n}\n",

			"int *ids_columnas_m_$6 = NULL;",
			"int id_ids_columnas_m_$6 = shmget(IPC_PRIVATE, $1 * sizeof(int), IPC_CREAT | S_IRUSR | S_IWUSR);",
			"ids_columnas_m_$6 = shmat(id_ids_columnas_m_$6, 0, 0);",
			"if(ids_columnas_m_$6 == NULL){\n\tprintf(\"No se pudo reservar espacio para ids_columnas_m_$6\\n\");\n\texit(EXIT_FAILURE);\n}",

			"for (int i = 0; i < $1; i++){",
			"\tids_columnas_m_$6[i] = shmget(IPC_PRIVATE, ($3 * sizeof($5)), IPC_CREAT | S_IRUSR | S_IWUSR);",
			"\tmatriz_$6[i] = ($5 *) shmat(ids_columnas_m_$6[i], 0, 0);\n}",
			"\n",
			"//DESCONECTARSE Y ELIMINAR matriz_$6",
			"for (int i = 0; i < $1; i++){",
			"\tshmdt(matriz_$6[i]);",
			"\tshmctl(ids_columnas_m_$6[i], IPC_RMID, 0);\n}",
			"shmdt(matriz_$6);",
			"shmctl(id_matriz_$6, IPC_RMID, 0);",
			"matriz_$6 = NULL;",
			"shmdt(ids_columnas_m_$6);",
			"shmctl(id_ids_columnas_m_$6, IPC_RMID, 0);",
			"ids_columnas_m_$6 = NULL;",
			"$7",
		],
		"description": "Fragmento para crear matriz de memoria compartida"
	},
	"Abrir archivo":{
		"prefix": "abrirArchivo",
		"body": [
			"FILE *archivo_$1 = NULL;",
			"archivo_$1 = fopen($2, \"$3\");",
			"if(archivo_$1 == NULL){\n\tprintf(\"No se pudo abrir archivo %s\\n\", $2);\n\texit(EXIT_FAILURE);\n}",
			"\n",
			"//CERRAR ARCHIVO archivo_$1",
			"fclose(archivo_$1);",
			"archivo_$1 = NULL;",
			"$4"
		],
		"description": "Fragmento para controlar manejo de archivo"
	},
	"Crear N Procesos Forma 1":{
		"prefix": "crearProcesosF1",
		"body": [
			"int nProcesos = $1;",
			"pid_t *pidProcesos = NULL;",
			"pidProcesos = (pid_t *)malloc(nProcesos * sizeof(pid_t));",
			"if(pidProcesos == NULL){\n\tprintf(\"No se pudo reservar memoria para pidProcesos\\n\");\n\texit(EXIT_FAILURE);\n}",
			"int $2;",
    		"for ($2 = 0; $2 < nProcesos; $2++){",
        	"\tpidProcesos[$2] = fork();",
       		"\tif (pidProcesos[$2] == 0){",
            "\t\tbreak;",
        	"\t}",
  			"}",
			"if($2 == nProcesos){\n\tsleep(1);\n\tshowtree();\n}else{\n\tsleep(2);\n}",
			"\n",
			"//ELIMINAR ESPACIO DE MEMORIA PARA pidProcesos",
			"free(pidProcesos);",
			"pidProcesos = NULL;",
			"$3"
		],
		"description": "Fragmento para crear n procesos hijos"
	},
	"Crear N Procesos Forma 2":{
		"prefix": "crearProcesosF2",
		"body": [
			"int nProcesos = $1;",
			"pid_t *pidProcesos = NULL;",
			"pidProcesos = (pid_t *)malloc(nProcesos * sizeof(pid_t));",
			"if(pidProcesos == NULL){\n\tprintf(\"No se pudo reservar memoria para pidProcesos\\n\");\n\texit(EXIT_FAILURE);\n}",
			"int $2;",
    		"for ($2 = 0; $2 < nProcesos; $2++){",
        	"\tpidProcesos[$2] = fork();",
       		"\tif (pidProcesos[$2] != 0){",
            "\t\tbreak;",
        	"\t}",
  			"}",
			"if($2 == 0){\n\tsleep(1);\n\tshowtree();\n}else{\n\tsleep(2);\n}",
			"\n",
			"//ELIMINAR ESPACIO DE MEMORIA PARA pidProcesos",
			"free(pidProcesos);",
			"pidProcesos = NULL;",
			"$3"
		],
		"description": "Fragmento para crear n procesos hijos"
	},
	"Mostrar Arbol":{
		"prefix": "showTree",
		"body": [
			"void showtree() {\n\tchar cmd[30] = {\"\"};\n\tsprintf(cmd, \"pstree -cAlp %d\", getpid());\n\tsystem(cmd);\n}"
		],
		"description": "Fragmento para crear funcion de mostrar arbol de procesos"
	},
	"Senales SIGUSR1":{
		"prefix": "signalUSR1",
		"body": [
			"void (*oldhandler)(int);",
			"oldhandler = signal(SIGUSR1, sighandler);",
			"if (oldhandler == SIG_ERR) {",
			"\tperror(\"signal:\");",
			"\texit(EXIT_FAILURE);",
			"}",
			"//kill(pidhijo, SIGUSR1); -> Envía la señal SIGUSR1 al proceso hijo",
			"//pause() -> Esperar para recibir una senal",
			"\n",
			"//RESTAURAR EL MANEJADOR PARA SIGUSR1",
			"if (signal(SIGUSR1, oldhandler) == SIG_ERR) {",
			"perror(\"signal:\");",
			"exit(EXIT_FAILURE);",
			"}",
			"$1"
		],
		"description": "Fragmento para definir senal SIGUSR1"
	},
	"Libreria para senales":{
		"prefix": "libSenales",
		"body": [
			"#include <signal.h>"
		],
		"description": "Fragmemto para traer libreria de senales"
	},
	"Libreria para hilos":{
		"prefix": "libHilos",
		"body": [
			"#include <pthread.h>",
			"//Instrucciones de compilación: gcc programa_sincronizado.c -lpthread"
		],
		"description": "Fragmemto para traer libreria de hilos"
	},
	"Librerias Generales":{
		"prefix": "libGenerales",
		"body": [
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <unistd.h>",
			"#include <sys/wait.h>",
			"#include <sys/types.h>",
			"#include <ctype.h>"
		],
		"description": "Fragmento para traer librerias generales"
	},
	"Librerias Memoria Compartida":{
		"prefix": "libMemoriaCompartida",
		"body": [
			"#include <sys/shm.h>",
			"#include <sys/stat.h>"
		],
		"description": "Fragmento para traer librerias generales"
	},
	"Crear vector memoria dinamica":{
		"prefix": "vecMemDim",
		"body": [
			"$1 *vector_d_$2 = NULL;",
			"int tam_vector_d_$2 = $3;",
			"vector_d_$2 = ($1 *) malloc(tam_vector_d_$2 * sizeof($1));"
			,"if(vector_d_$2 == NULL){\n\tprintf(\"No se pudo reservar espacio para vector_d_$2\\n\");\n\texit(EXIT_FAILURE);\n}"
			,"\n"
			,"//LIBERAR MEMORIA DE vector_d_$2"
			,"free(vector_d_$2);"
			,"vector_d_$2 = NULL;"
			,"$6"
		],
		"description": "Fragmento para crear un vector dinamico"
	},
	"Crear matriz con memoria dinamica":{
		"prefix": "matMemDim",
		"body": [
			"$1 **matriz_d_$2 = NULL;"
			,"int filas_m_d_$2 = $3;"
			,"int columnas_m_d_$2 = $4;"
			,"matriz_d_$2 = ($1 **) malloc(filas_m_d_$2 * sizeof($1 *));"
			,"if(matriz_d_$2 == NULL){\n\tprintf(\"No se pudo reservar espacio para matriz_d_$2\\n\");\n\texit(EXIT_FAILURE);\n}"
			,"for(int i = 0; i < filas_m_d_$2; i++){"
			,"\tmatriz_d_$2[i] = ($1 *) malloc(columnas_m_d_$2 * sizeof($1));"
			,"}"
			,"\n"
			,"//LIBERAR ESPACIO DE LA matriz_d_$2"
			,"for(int i = 0; i < filas_m_d_$2; i++){"
			,"\tfree(matriz_d_$2[i]);"
			,"\tmatriz_d_$2[i] = NULL;"
			,"}"
			,"free(matriz_d_$2);"
			,"matriz_d_$2 = NULL;"
			,"$6"
		],
		"description": "Fragmento para crear una matriz dinamica"
	},
	"Imprimir Matriz":{
		"prefix": "imprimirMatriz",
		"body": [
			"for (int pi = 0; pi < $1; pi++){",
        	"\tfor (int pj = 0; pj < $2; pj++){",
            "\t\t$3[pi][pj] = 1;",
            "\t\tprintf(\"[%$4] \", $3[pi][pj]);",
        	"\t}",
        	"\tprintf(\"\\n\");",
    		"}",
			"$5"
		],
		"description": "Fragmento para llenar e imprimir matriz"
	},
	"Imprimir Vector":{
		"prefix": "imprimirVector",
		"body": [
			"for (int pi = 0; pi < $1; pi++){",
            "\t$2[pi] = 1;",
            "\tprintf(\"[%$3] \", $2[pi]);",
        	"}",
        	"printf(\"\\n\");",
			"$4"
		],
		"description": "Fragmento para llenar e imprimir vector"
	},
	"Funciones crear memoria compartida":{
		"prefix": "funMatSHM",
		"body": [
			"size_t espacioMatriz(int filas, int columnas, size_t tamTipoDato){",
			"\tsize_t tam;",
			"\ttam  = filas * sizeof(void *);",
			"\ttam += (columnas * filas * tamTipoDato);",
			"\treturn tam;",
			"}",
			"",
			"//FUNCION PARA APUNTAR A LOS PUNTEROS SU POSICION CORRESPONDIENTE",
			"void configurarPunteros(void **m, int filas, int columnas, size_t tamTipoDato){",
			"\tint i;",
			"\tsize_t saltosFila = columnas * tamTipoDato;",
			"\tm[0] = m + filas;",
			"\tfor (i = 1; i < filas; i++){",
			"\t\tm[i] = (m[i-1] + saltosFila);",
			"\t}",
			"}",
			"$1"
		],
		"description": "Fragmento para crear funciones de memoria compartida de profesor"
	},
	"Matriz Memoria Compartida Forma Profe":{
		"prefix": "matrizSHM_FP",
		"body": [
			"$1 **matriz_shm_$2 = NULL;",
			"int filas_$2 = $3;",
			"int columnas_$2 = $4;",
			"int id_m_$2 = shmget(IPC_PRIVATE, espacioMatriz(filas_$2, columnas_$2, sizeof($1)), IPC_CREAT | S_IRUSR | S_IWUSR);",
			"matriz_shm_$2 = shmat(id_m_$2, 0, 0);",
			"if(matriz_shm_$2 == NULL){\n\tprintf(\"No se pudo reservar espacio para matriz_shm_$2\\n\");\n\texit(EXIT_FAILURE);\n}",
			"configurarPunteros((void *) matriz_shm_$2, filas_$2, columnas_$2, sizeof($1));",
			"",
			"//DESCONECTARSE Y ELIMINAR matriz_shm_$2",
			"shmdt(matriz_shm_$2);",
			"shmctl(id_m_$2, IPC_RMID, 0);",
			"$5"
		],
		"description": "Fragmento para crear matriz fProfe"
	}
}